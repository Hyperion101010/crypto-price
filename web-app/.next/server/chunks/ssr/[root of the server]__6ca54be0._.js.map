{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/styles/CoinList.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"additionalInfo\": \"CoinList-module__xd_PSq__additionalInfo\",\n  \"coinCard\": \"CoinList-module__xd_PSq__coinCard\",\n  \"coinImage\": \"CoinList-module__xd_PSq__coinImage\",\n  \"coinInfo\": \"CoinList-module__xd_PSq__coinInfo\",\n  \"coinInfoText\": \"CoinList-module__xd_PSq__coinInfoText\",\n  \"coinPrice\": \"CoinList-module__xd_PSq__coinPrice\",\n  \"coinPriceDown\": \"CoinList-module__xd_PSq__coinPriceDown\",\n  \"coinPriceUp\": \"CoinList-module__xd_PSq__coinPriceUp\",\n  \"coinTitle\": \"CoinList-module__xd_PSq__coinTitle\",\n  \"gridContainer\": \"CoinList-module__xd_PSq__gridContainer\",\n  \"groupHoverText\": \"CoinList-module__xd_PSq__groupHoverText\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyperion/courant%20work/jobs/crypto-price/web-app/components/CoinList.js"],"sourcesContent":["import React from \"react\";\nimport styles from \"../styles/CoinList.module.css\"; // Import the CSS module\n\nconst CryptoCard = ({ coin }) => {\n  const priceChange = coin.price_change_percentage_24h;\n\n  // Determine the color based on the price change\n  const priceChangeClass = priceChange > 0 ? styles.coinPriceUp : styles.coinPriceDown;\n\n  return (\n    <div className={`${styles.coinCard} group`}>\n      <img\n        src={coin.image}\n        alt={coin.name}\n        className={styles.coinImage}\n      />\n      <div className={styles.coinInfo}>\n        <h3 className={`${styles.coinTitle} group-hover:text-gray-600`}>{coin.name}</h3> \n        <p className={`${styles.coinInfoText} group-hover:text-gray-600`}>\n          Price: ${coin.current_price.toLocaleString()}\n        </p>\n        <p className=\"text-sm text-gray-500 group-hover:text-gray-500\">\n        Last Updated: {new Date(coin.last_updated).toLocaleString(\"en-US\", {\n            day: \"2-digit\",\n            month: \"short\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n        })}\n        </p>\n        <p className={`${styles.coinPrice}`}>\n            Daily Change: <span className={`${priceChangeClass}`}>{priceChange.toFixed(2)}%</span>\n        </p>\n      </div>\n\n      {/* Hover Effect: Display additional info */}\n      <div className={styles.additionalInfo}>\n        <p>Market Cap: ${coin.market_cap.toLocaleString()}</p>\n        <p>24h High: ${coin.high_24h.toLocaleString()}</p>\n        <p>24h Low: ${coin.low_24h.toLocaleString()}</p>\n        <p>24h Volume: ${coin.total_volume.toLocaleString()}</p>\n      </div>\n    </div>\n  );\n};\n\nconst CoinList = ({ coins }) => {\n  return (\n    <div className={styles.gridContainer}>\n      {coins.map((coin) => (\n        <CryptoCard key={coin.id} coin={coin} />\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;"],"names":[],"mappings":";;;;AAAA;AACA,6NAAoD,wBAAwB;;;;AAE5E,MAAM,aAAa,CAAC,EAAE,IAAI,EAAE;IAC1B,MAAM,cAAc,KAAK,2BAA2B;IAEpD,gDAAgD;IAChD,MAAM,mBAAmB,cAAc,IAAI,8HAAA,CAAA,UAAM,CAAC,WAAW,GAAG,8HAAA,CAAA,UAAM,CAAC,aAAa;IAEpF,qBACE,8OAAC;QAAI,WAAW,GAAG,8HAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;;0BACxC,8OAAC;gBACC,KAAK,KAAK,KAAK;gBACf,KAAK,KAAK,IAAI;gBACd,WAAW,8HAAA,CAAA,UAAM,CAAC,SAAS;;;;;;0BAE7B,8OAAC;gBAAI,WAAW,8HAAA,CAAA,UAAM,CAAC,QAAQ;;kCAC7B,8OAAC;wBAAG,WAAW,GAAG,8HAAA,CAAA,UAAM,CAAC,SAAS,CAAC,0BAA0B,CAAC;kCAAG,KAAK,IAAI;;;;;;kCAC1E,8OAAC;wBAAE,WAAW,GAAG,8HAAA,CAAA,UAAM,CAAC,YAAY,CAAC,0BAA0B,CAAC;;4BAAE;4BACvD,KAAK,aAAa,CAAC,cAAc;;;;;;;kCAE5C,8OAAC;wBAAE,WAAU;;4BAAkD;4BAChD,IAAI,KAAK,KAAK,YAAY,EAAE,cAAc,CAAC,SAAS;gCAC/D,KAAK;gCACL,OAAO;gCACP,MAAM;gCACN,QAAQ;gCACR,QAAQ;4BACZ;;;;;;;kCAEA,8OAAC;wBAAE,WAAW,GAAG,8HAAA,CAAA,UAAM,CAAC,SAAS,EAAE;;4BAAE;0CACnB,8OAAC;gCAAK,WAAW,GAAG,kBAAkB;;oCAAG,YAAY,OAAO,CAAC;oCAAG;;;;;;;;;;;;;;;;;;;0BAKpF,8OAAC;gBAAI,WAAW,8HAAA,CAAA,UAAM,CAAC,cAAc;;kCACnC,8OAAC;;4BAAE;4BAAc,KAAK,UAAU,CAAC,cAAc;;;;;;;kCAC/C,8OAAC;;4BAAE;4BAAY,KAAK,QAAQ,CAAC,cAAc;;;;;;;kCAC3C,8OAAC;;4BAAE;4BAAW,KAAK,OAAO,CAAC,cAAc;;;;;;;kCACzC,8OAAC;;4BAAE;4BAAc,KAAK,YAAY,CAAC,cAAc;;;;;;;;;;;;;;;;;;;AAIzD;AAEA,MAAM,WAAW,CAAC,EAAE,KAAK,EAAE;IACzB,qBACE,8OAAC;QAAI,WAAW,8HAAA,CAAA,UAAM,CAAC,aAAa;kBACjC,MAAM,GAAG,CAAC,CAAC,qBACV,8OAAC;gBAAyB,MAAM;eAAf,KAAK,EAAE;;;;;;;;;;AAIhC;uCAEe","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyperion/courant%20work/jobs/crypto-price/web-app/components/CryptoDashboard.js"],"sourcesContent":["import CoinList from \"./CoinList\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\n\nconst getCryptoData = async () => {\n  const url =\n    \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,tether,binancecoin,solana\";\n  const headers = {\n    \"x-cg-api-key\": \"CG-faPy7HfEGrgNwqMMZDqJaG9g\",\n  };\n\n  const cryptores = await fetch(url, { headers });\n  if (!cryptores.ok) {\n    throw new Error(`Error: ${cryptores.status} ${cryptores.statusText}`);\n  }\n  return await cryptores.json();\n};\n\nconst CryptoDashboard = () => {\n  const [search, setSearch] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n  const [lastRefreshed, setLastRefreshed] = useState(null); // Store last refresh time\n\n  const { data, isLoading, isError, refetch, isFetching, isRefetchError, isRefetching } = useQuery({\n    queryKey: [\"cryptoData\"],\n    queryFn: getCryptoData,\n  });\n\n  const handleRefresh = async () => {\n    try {\n      await refetch();\n      setLastRefreshed(new Date());\n      setShowPopup(true);\n      setTimeout(() => {\n        setShowPopup(false);\n      }, 3000);\n      console.log(\"Data refreshed sucessfully!\")\n    } catch (error) {\n      console.error(\"Error during refresh:\", error);\n    }\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (lastRefreshed) {\n        setLastRefreshed(new Date(lastRefreshed));\n      }\n    }, 60000);\n\n    return () => clearInterval(interval);\n  }, [lastRefreshed]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"flex flex-col items-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500 border-solid\"></div>\n          <p className=\"mt-3 text-lg text-gray-700 font-semibold\">Fetching Crypto Data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"bg-red-200 text-red-700 px-4 py-2 rounded-md shadow-sm\">\n          <p className=\"font-semibold\">Error fetching data. Please try again later.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isRefetchError) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"bg-red-200 text-red-700 px-4 py-2 rounded-md shadow-sm\">\n          <p className=\"font-semibold\">Refetch failed.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const filteredCoins = data.filter((coin) =>\n    coin.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  // Function to format the time since the last refresh\n  const timeSinceLastRefresh = lastRefreshed\n    ? `${Math.floor((new Date() - new Date(lastRefreshed)) / 1000 / 60)} minutes ago`\n    : \"0 minutes ago\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex flex-col items-center\">\n      {/* Header */}\n      <header className=\"w-full bg-gray-900 text-white py-6 shadow-md text-center\">\n        <h1 className=\"text-2xl font-bold\">Crypto Tracker 🟡</h1>\n        <div className=\"mt-4 flex justify-center space-x-4\">\n          <input\n            type=\"text\"\n            placeholder=\"🔍 Search cryptocurrencies...\"\n            className=\"px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 w-2/3 md:w-1/3\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <button\n            onClick={handleRefresh}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-700 transition\"\n          >\n            {isFetching ? \"Refreshing...\" : \"Refresh\"}\n          </button>\n        </div>\n        {/* Display time since last refresh */}\n        <div className=\"mt-4 text-sm text-gray-500\">\n          Last refreshed: {timeSinceLastRefresh}\n        </div>\n      </header>\n\n      {/* Coin List */}\n      <main className=\"w-full max-w-6xl p-6\">\n        <CoinList coins={filteredCoins} />\n      </main>\n\n      {/* Footer */}\n      <footer className=\"w-full bg-gray-900 text-white py-4 text-center mt-auto\">\n        <p>⚡ Powered by CoinGecko API</p>\n      </footer>\n\n      {/* Popup after refresh */}\n      {showPopup && (\n        <div className=\"popup fixed top-4 right-4 bg-green-500 text-white px-6 py-2 rounded-md shadow-lg\">\n          <p>Data refreshed successfully!</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CryptoDashboard;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 460, "column": 0}, "map": {"version":3,"sources":["file:///Users/hyperion/courant%20work/jobs/crypto-price/web-app/app/page.js"],"sourcesContent":["\"use client\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport CryptoDashboard from \"@/components/CryptoDashboard\";\n\nconst qclient = new QueryClient();\n\nexport default function Home({}) {\n  return (\n    <QueryClientProvider client={qclient}>\n    <CryptoDashboard></CryptoDashboard>\n    </QueryClientProvider>\n  )\n}"],"names":[],"mappings":";;;;AAEA;AAAA;AACA;AAHA;;;;AAKA,MAAM,UAAU,IAAI,6KAAA,CAAA,cAAW;AAEhB,SAAS,KAAK,EAAE;IAC7B,qBACE,8OAAC,sLAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAC7B,cAAA,8OAAC,6HAAA,CAAA,UAAe;;;;;;;;;;AAGpB","debugId":null}},
    {"offset": {"line": 486, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}